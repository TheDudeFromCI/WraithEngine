name: CI

on:
  push:
    paths:
      - "src/**"
      - "pom.xml"
      - ".github/**"
  pull_request:
    paths:
      - "src/**"
      - "pom.xml"
      - ".github/**"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        
      - name: Setup JDK13
        uses: actions/setup-java@v1
        with:
          java-version: 13
          java-package: jdk
          architecture: x64

      - name: Cache maven build
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Deep clone (For Sonar blame details)
        run: git fetch --prune --unshallow

      - name: Build with Maven
        run: |
          mvn -B clean javadoc:jar test jacoco:report sonar:sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Show Error Logs
        if: failure()
        run: |
          cat hs_err_pid* 2> /dev/null || true
          rm hs_err_pid* 2> /dev/null || true

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Generate build number
        id: build_number
        uses: einaregilsson/build-number@v2
        with:
          token: ${{secrets.github_token}}

      - name: Print build number
        run: echo "Build number is $BUILD_NUMBER"

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup JDK13
        uses: actions/setup-java@v1
        with:
          java-version: 13
          java-package: jdk
          architecture: x64

      - name: Cache maven build
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Apply build number
        run: |
          sed -i "s|<version>dev_build</version>|<version>build_$BUILD_NUMBER</version>|g" pom.xml

      - name: Configure Maven Deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: thedudefromci
        run: |
          mkdir -p ~/.m2
          echo "<settings><servers><server><id>github</id><username>${USERNAME}</username><password>${GITHUB_TOKEN}</password></server></servers></settings>" > ~/.m2/settings.xml
          mvn -B -DskipTests deploy

      - name: Create Release Version
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build_${{ steps.build_number.outputs.build_number }}
          release_name: Build ${{ steps.build_number.outputs.build_number }}
          draft: false
          prerelease: true
          body: |
            Auto-generated Build ${{ steps.build_number.outputs.build_number }}.

      - name: Create Zip Release
        run: |
          zip -j build target/wraithengine-*.jar
          zip -j lib target/lib/*.jar

      - name: Upload Release Zip
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build.zip
          asset_name: build_${{ steps.build_number.outputs.build_number }}.zip
          asset_content_type: application/zip

      - name: Upload Libraries Zip
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./lib.zip
          asset_name: build_${{ steps.build_number.outputs.build_number }}_lib.zip
          asset_content_type: application/zip
